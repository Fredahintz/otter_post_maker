import requests
from dotenv import load_dotenv
from rich import print
import random
import numpy as np
import csv
import openai
import boto3
from botocore.exceptions import ClientError
import json
from datetime import date
import logging
import os
from requests.auth import HTTPBasicAuth

# to do -- add try/except clauses for most of these with error handling
# add tests
# 

if not os.path.exists("log"):
    os.makedirs("log")

logging.basicConfig(filename="log/otter_post_maker.log",
                    encoding='utf-8',
                    level=logging.INFO,
                    format='%(asctime)s %(message)s', 
                    datefmt='%m/%d/%Y %I:%M:%S %p')

class otter_post_maker:
    def __init__(self, base_url="https://api.openverse.engineering/v1/images/",
                       poets_file = "poets.csv",
                       ):
        self.poets_file = poets_file
        self.base_url = base_url
        self.otter_types = [
                    "North American River Otter",
                    "Sea Otter",
                    "Giant Otter",
                    "Eurasian Otter",
                    "Asian Small-Clawed otter",
                    "African Clawless Otter",
                    "Hairy-nosed Otter",
                    "Marine Otter",
                    "Smooth-coated Otter",
                    "Neotropical River Otter",
                    "Southern River Otter",
                    "Congo Clawless Otter",
                    "Spotted-Neck Otter"
                    ]
        self.otter = random.choice(self.otter_types)
        logging.info(f"Chose {self.otter} as today's otter.")
        today_post_path = 'posts/'+'post_of_the_day'+str(date.today())+".txt"
        if os.path.exists(today_post_path):
            pass
        else:
            self.post = self.write_post()
            post_write = open(today_post_path,"w")
            n = post_write.write(self.post)
            post_write.close()
        post_file = open(today_post_path,"r")
        self.post = post_file.read()
        post_file.close()
        self.send_post_to_wordpress(wpBaseURL="https://otters.day/index.php",
                                    post=self.post,
                                    title=self.create_title(),
                                    PostStatus="publish")

    def image_url_finder(self, search_query,base_url):
        photo_nums = []
        while len(photo_nums)==0:
            page = str(random.randint(1,10))
            image_search_params = {
                "q":search_query,
                "page": page
            }
            image_search_response = requests.get(url=base_url,params=image_search_params)
            image_search_response_json = image_search_response.json()["results"]
            image_search_response_otters = [x["tags"] for x in image_search_response_json]
            otter_elements = [any([x['name'] == 'otter' for x in i]) for i in image_search_response_otters]
            photo_nums = np.nonzero(otter_elements)[0]
        chosen_pic = random.choice(photo_nums)
        image_url = image_search_response_json[chosen_pic]['url']
        return image_url
    def get_poet(self,file):
        with open(file) as f:
            reader = csv.reader(f)
            chosen_row = random.choice(list(reader))
        return chosen_row[0]
    def get_secret(self, secret_name, region_name = "us-east-1"):
        # Create a Secrets Manager client
        session = boto3.session.Session()
        client = session.client(
            service_name='secretsmanager',
            region_name=region_name
        )

        try:
            get_secret_value_response = client.get_secret_value(
                SecretId=secret_name
            )
        except ClientError as e:
            raise e

        secret = get_secret_value_response['SecretString']

        return secret
    def get_otter_poem_in_style(self,otter_type,poet):

        openai.api_key = json.loads(self.get_secret(secret_name="OPENAI_API_KEY"))["OPENAI_API_KEY"]

        completion = openai.ChatCompletion.create(model = "gpt-3.5-turbo",
                                            messages=[{"role":"user", "content":f"Write a poem about {otter_type} in the style of {poet}. Do not use {poet}'s name in the poem."}])

        return completion.choices[0].message.content
    def write_post(self):
        image_url = self.image_url_finder(search_query=self.otter, base_url=self.base_url)
        poet = self.get_poet(file = self.poets_file)
        poem = self.get_otter_poem_in_style(otter_type = self.otter, poet = poet)

        tag = f"A poem about a {self.otter} in the style of {poet} auto-generated by CHATGPT-3.5"

        image_block_start='<!-- wp:image {"id":50,"sizeSlug":"full","linkDestination":"none"} --> <figure class="wp-block-image size-full"><img src='

        image_block_end = 'alt="" class="wp-image-50"/></figure><!-- /wp:image -->'

        post_image_block = image_block_start + image_url + "\n" + image_block_end

        return post_image_block+poem+"\n"+tag
    def create_title(self):
            today = date.today()
            title = self.otter + " " + str(today)
            return title
    def send_post_to_wordpress(self, wpBaseURL, post, title, PostStatus):

        WP_url = wpBaseURL + "/wp-json/wp/v2/posts"

        wordpress_password= json.loads(self.get_secret(secret_name="otters_day_app_password"))['otters_day_app_password']

        auth = HTTPBasicAuth("emu_of_piety",wordpress_password)

        headers = {
        "Accept": "application/json",
        "Content-Type": "application/json"
        }

        payload = json.dumps({ 
            "status":PostStatus,
            "title": title,
            "content": post
        })

        response = requests.request(
        "POST",
        WP_url,
        data=payload,
        headers=headers,
        auth=auth
        )

        return response

post = otter_post_maker()
